.TH "com.angelmsger.cslaboratory.login.BCrypt" 3 "2016年 十二月 27日 星期二" "Version 0.1.0" "猫爪实验室" \" -*- nroff -*-
.ad l
.nh
.SH NAME
com.angelmsger.cslaboratory.login.BCrypt \- 
.SH SYNOPSIS
.br
.PP
.SS "静态 Public 成员函数"

.in +1c
.ti -1c
.RI "static String \fBhashpw\fP (String password, String salt)"
.br
.ti -1c
.RI "static String \fBgensalt\fP (int log_rounds, SecureRandom random)"
.br
.ti -1c
.RI "static String \fBgensalt\fP (int log_rounds)"
.br
.ti -1c
.RI "static String \fBgensalt\fP ()"
.br
.ti -1c
.RI "static boolean \fBcheckpw\fP (String plaintext, String hashed)"
.br
.in -1c
.SS "Private 成员函数"

.in +1c
.ti -1c
.RI "final void \fBencipher\fP (int lr[], int off)"
.br
.ti -1c
.RI "void \fBinit_key\fP ()"
.br
.ti -1c
.RI "void \fBkey\fP (byte key[])"
.br
.ti -1c
.RI "void \fBekskey\fP (byte data[], byte \fBkey\fP[])"
.br
.ti -1c
.RI "byte [] \fBcrypt_raw\fP (byte password[], byte salt[], int log_rounds)"
.br
.in -1c
.SS "静态 Private 成员函数"

.in +1c
.ti -1c
.RI "static String \fBencode_base64\fP (byte d[], int len)  throws IllegalArgumentException "
.br
.ti -1c
.RI "static byte \fBchar64\fP (char x)"
.br
.ti -1c
.RI "static byte [] \fBdecode_base64\fP (String s, int maxolen)  throws IllegalArgumentException "
.br
.ti -1c
.RI "static int \fBstreamtoword\fP (byte data[], int offp[])"
.br
.in -1c
.SS "Private 属性"

.in +1c
.ti -1c
.RI "int \fBP\fP []"
.br
.ti -1c
.RI "int \fBS\fP []"
.br
.in -1c
.SS "静态 Private 属性"

.in +1c
.ti -1c
.RI "static final int \fBGENSALT_DEFAULT_LOG2_ROUNDS\fP = 10"
.br
.ti -1c
.RI "static final int \fBBCRYPT_SALT_LEN\fP = 16"
.br
.ti -1c
.RI "static final int \fBBLOWFISH_NUM_ROUNDS\fP = 16"
.br
.ti -1c
.RI "static final int \fBP_orig\fP []"
.br
.ti -1c
.RI "static final int \fBS_orig\fP []"
.br
.ti -1c
.RI "static final int \fBbf_crypt_ciphertext\fP []"
.br
.ti -1c
.RI "static final char \fBbase64_code\fP []"
.br
.ti -1c
.RI "static final byte \fBindex_64\fP []"
.br
.in -1c
.SH "详细描述"
.PP 
\fBBCrypt\fP implements OpenBSD-style Blowfish password hashing using the scheme described in 'A Future-Adaptable Password Scheme' by Niels Provos and David Mazieres\&. 
.PP
This password hashing system tries to thwart off-line password cracking using a computationally-intensive hashing algorithm, based on Bruce Schneier's Blowfish cipher\&. The work factor of the algorithm is parameterised, so it can be increased as computers get faster\&. 
.PP
Usage is really simple\&. To hash a password for the first time, call the hashpw method with a random salt, like this: 
.PP
\fC String pw_hash = \fBBCrypt\&.hashpw\fP(plain_password, \fBBCrypt\&.gensalt()\fP); 
.br
 \fP 
.PP
To check whether a plaintext password matches one that has been hashed previously, use the checkpw method: 
.PP
\fC if (BCrypt\&.checkpw(candidate_password, stored_hash))
.br
     System\&.out\&.println('It matches');
.br
 else
.br
     System\&.out\&.println('It does not match');
.br
 \fP 
.PP
The \fBgensalt()\fP method takes an optional parameter (log_rounds) that determines the computational complexity of the hashing: 
.PP
\fC String strong_salt = BCrypt\&.gensalt(10)
.br
 String stronger_salt = BCrypt\&.gensalt(12)
.br
 \fP 
.PP
The amount of work increases exponentially (2**log_rounds), so each increment is twice as much work\&. The default log_rounds is 10, and the valid range is 4 to 31\&.
.PP
\fB作者:\fP
.RS 4
Damien Miller 
.RE
.PP
\fB版本:\fP
.RS 4
0\&.2 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 51 行定义\&.
.SH "成员函数说明"
.PP 
.SS "static byte com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.char64 (char x)\fC [static]\fP, \fC [private]\fP"
Look up the 3 bits base64-encoded by the specified character, range-checking againt conversion table 
.PP
\fB参数:\fP
.RS 4
\fIx\fP the base64-encoded value 
.RE
.PP
\fB返回:\fP
.RS 4
the decoded value of x 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 412 行定义\&.
.SS "static boolean com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.checkpw (String plaintext, String hashed)\fC [static]\fP"
Check that a plaintext password matches a previously hashed one 
.PP
\fB参数:\fP
.RS 4
\fIplaintext\fP the plaintext password to verify 
.br
\fIhashed\fP the previously-hashed password 
.RE
.PP
\fB返回:\fP
.RS 4
true if the passwords match, false otherwise 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 736 行定义\&.
.SS "byte [] com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.crypt_raw (byte password[], byte salt[], int log_rounds)\fC [private]\fP"
Perform the central password hashing step in the bcrypt scheme 
.PP
\fB参数:\fP
.RS 4
\fIpassword\fP the password to hash 
.br
\fIsalt\fP the binary salt to hash with the password 
.br
\fIlog_rounds\fP the binary logarithm of the number of rounds of hashing to apply 
.RE
.PP
\fB返回:\fP
.RS 4
an array containing the binary hashed password 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 594 行定义\&.
.SS "static byte [] com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.decode_base64 (String s, int maxolen) throws IllegalArgumentException\fC [static]\fP, \fC [private]\fP"
Decode a string encoded using bcrypt's base64 scheme to a byte array\&. Note that this is \fInot\fP compatible with the standard MIME-base64 encoding\&. 
.PP
\fB参数:\fP
.RS 4
\fIs\fP the string to decode 
.br
\fImaxolen\fP the maximum number of bytes to decode 
.RE
.PP
\fB返回:\fP
.RS 4
an array containing the decoded bytes 
.RE
.PP
\fB异常:\fP
.RS 4
\fIIllegalArgumentException\fP if maxolen is invalid 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 427 行定义\&.
.SS "void com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.ekskey (byte data[], byte key[])\fC [private]\fP"
Perform the 'enhanced key schedule' step described by Provos and Mazieres in 'A Future-Adaptable Password Scheme' http://www.openbsd.org/papers/bcrypt-paper.ps 
.PP
\fB参数:\fP
.RS 4
\fIdata\fP salt information 
.br
\fIkey\fP password information 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 559 行定义\&.
.SS "final void com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.encipher (int lr[], int off)\fC [private]\fP"
Blowfish encipher a single 64-bit block encoded as two 32-bit halves 
.PP
\fB参数:\fP
.RS 4
\fIlr\fP an array containing the two 32-bit half blocks 
.br
\fIoff\fP the position in the array of the blocks 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 474 行定义\&.
.SS "static String com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.encode_base64 (byte d[], int len) throws IllegalArgumentException\fC [static]\fP, \fC [private]\fP"
Encode a byte array using bcrypt's slightly-modified base64 encoding scheme\&. Note that this is \fInot\fP compatible with the standard MIME-base64 encoding\&.
.PP
\fB参数:\fP
.RS 4
\fId\fP the byte array to encode 
.br
\fIlen\fP the number of bytes to encode 
.RE
.PP
\fB返回:\fP
.RS 4
base64-encoded string 
.RE
.PP
\fB异常:\fP
.RS 4
\fIIllegalArgumentException\fP if the length is invalid 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 373 行定义\&.
.SS "static String com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.gensalt (int log_rounds, SecureRandom random)\fC [static]\fP"
Generate a salt for use with the \fBBCrypt\&.hashpw()\fP method 
.PP
\fB参数:\fP
.RS 4
\fIlog_rounds\fP the log2 of the number of rounds of hashing to apply - the work factor therefore increases as 2**log_rounds\&. 
.br
\fIrandom\fP an instance of SecureRandom to use 
.RE
.PP
\fB返回:\fP
.RS 4
an encoded salt value 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 693 行定义\&.
.SS "static String com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.gensalt (int log_rounds)\fC [static]\fP"
Generate a salt for use with the \fBBCrypt\&.hashpw()\fP method 
.PP
\fB参数:\fP
.RS 4
\fIlog_rounds\fP the log2 of the number of rounds of hashing to apply - the work factor therefore increases as 2**log_rounds\&. 
.RE
.PP
\fB返回:\fP
.RS 4
an encoded salt value 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 715 行定义\&.
.SS "static String com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.gensalt ()\fC [static]\fP"
Generate a salt for use with the \fBBCrypt\&.hashpw()\fP method, selecting a reasonable default for the number of hashing rounds to apply 
.PP
\fB返回:\fP
.RS 4
an encoded salt value 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 725 行定义\&.
.SS "static String com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.hashpw (String password, String salt)\fC [static]\fP"
Hash a password using the OpenBSD bcrypt scheme 
.PP
\fB参数:\fP
.RS 4
\fIpassword\fP the password to hash 
.br
\fIsalt\fP the salt to hash with (perhaps generated using \fBBCrypt\&.gensalt\fP) 
.RE
.PP
\fB返回:\fP
.RS 4
the hashed password 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 635 行定义\&.
.SS "void com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.init_key ()\fC [private]\fP"
Initialise the Blowfish key schedule 
.PP
在文件 BCrypt\&.java 第 521 行定义\&.
.SS "void com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.key (byte key[])\fC [private]\fP"
Key the Blowfish cipher 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP an array containing the key 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 530 行定义\&.
.SS "static int com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.streamtoword (byte data[], int offp[])\fC [static]\fP, \fC [private]\fP"
Cycically extract a word of key material 
.PP
\fB参数:\fP
.RS 4
\fIdata\fP the string to extract the data from 
.br
\fIoffp\fP a 'pointer' (as a one-entry array) to the current offset into data 
.RE
.PP
\fB返回:\fP
.RS 4
the next word of material from data 
.RE
.PP

.PP
在文件 BCrypt\&.java 第 504 行定义\&.
.SH "类成员变量说明"
.PP 
.SS "final char com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.base64_code[]\fC [static]\fP, \fC [private]\fP"
\fB初始值:\fP
.PP
.nf
= {
            '\&.', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
            'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
            'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
            'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
            'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5',
            '6', '7', '8', '9'
    }
.fi
.PP
在文件 BCrypt\&.java 第 333 行定义\&.
.SS "final int com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.BCRYPT_SALT_LEN = 16\fC [static]\fP, \fC [private]\fP"

.PP
在文件 BCrypt\&.java 第 54 行定义\&.
.SS "final int com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.bf_crypt_ciphertext[]\fC [static]\fP, \fC [private]\fP"
\fB初始值:\fP
.PP
.nf
= {
            0x4f727068, 0x65616e42, 0x65686f6c,
            0x64657253, 0x63727944, 0x6f756274
    }
.fi
.PP
在文件 BCrypt\&.java 第 327 行定义\&.
.SS "final int com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.BLOWFISH_NUM_ROUNDS = 16\fC [static]\fP, \fC [private]\fP"

.PP
在文件 BCrypt\&.java 第 57 行定义\&.
.SS "final int com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.GENSALT_DEFAULT_LOG2_ROUNDS = 10\fC [static]\fP, \fC [private]\fP"

.PP
在文件 BCrypt\&.java 第 53 行定义\&.
.SS "final byte com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.index_64[]\fC [static]\fP, \fC [private]\fP"
\fB初始值:\fP
.PP
.nf
= {
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, 0, 1, 54, 55,
            56, 57, 58, 59, 60, 61, 62, 63, -1, -1,
            -1, -1, -1, -1, -1, 2, 3, 4, 5, 6,
            7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
            17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
            -1, -1, -1, -1, -1, -1, 28, 29, 30,
            31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
            51, 52, 53, -1, -1, -1, -1, -1
    }
.fi
.PP
在文件 BCrypt\&.java 第 343 行定义\&.
.SS "int com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.P[]\fC [private]\fP"

.PP
在文件 BCrypt\&.java 第 360 行定义\&.
.SS "final int com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.P_orig[]\fC [static]\fP, \fC [private]\fP"
\fB初始值:\fP
.PP
.nf
= {
            0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,
            0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,
            0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,
            0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,
            0x9216d5d9, 0x8979fb1b
    }
.fi
.PP
在文件 BCrypt\&.java 第 60 行定义\&.
.SS "int com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.S[]\fC [private]\fP"

.PP
在文件 BCrypt\&.java 第 361 行定义\&.
.SS "final int com\&.angelmsger\&.cslaboratory\&.login\&.BCrypt\&.S_orig[]\fC [static]\fP, \fC [private]\fP"

.PP
在文件 BCrypt\&.java 第 67 行定义\&.

.SH "作者"
.PP 
由 Doyxgen 通过分析 猫爪实验室 的 源代码自动生成\&.
